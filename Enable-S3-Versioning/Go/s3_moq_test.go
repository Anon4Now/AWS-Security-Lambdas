// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package main

import (
	"context"
	"github.com/aws/aws-sdk-go-v2/service/s3"
	"sync"
)

// Ensure, that S3ActionsApiMock does implement S3ActionsApi.
// If this is not the case, regenerate this file with moq.
var _ S3ActionsApi = &S3ActionsApiMock{}

// S3ActionsApiMock is a mock implementation of S3ActionsApi.
//
//	func TestSomethingThatUsesS3ActionsApi(t *testing.T) {
//
//		// make and configure a mocked S3ActionsApi
//		mockedS3ActionsApi := &S3ActionsApiMock{
//			GetBucketVersioningFunc: func(ctx context.Context, params *s3.GetBucketVersioningInput, optFns ...func(*s3.Options)) (*s3.GetBucketVersioningOutput, error) {
//				panic("mock out the GetBucketVersioning method")
//			},
//			ListBucketsFunc: func(ctx context.Context, params *s3.ListBucketsInput, optFns ...func(*s3.Options)) (*s3.ListBucketsOutput, error) {
//				panic("mock out the ListBuckets method")
//			},
//			PutBucketVersioningFunc: func(ctx context.Context, params *s3.PutBucketVersioningInput, optFns ...func(*s3.Options)) (*s3.PutBucketVersioningOutput, error) {
//				panic("mock out the PutBucketVersioning method")
//			},
//		}
//
//		// use mockedS3ActionsApi in code that requires S3ActionsApi
//		// and then make assertions.
//
//	}
type S3ActionsApiMock struct {
	// GetBucketVersioningFunc mocks the GetBucketVersioning method.
	GetBucketVersioningFunc func(ctx context.Context, params *s3.GetBucketVersioningInput, optFns ...func(*s3.Options)) (*s3.GetBucketVersioningOutput, error)

	// ListBucketsFunc mocks the ListBuckets method.
	ListBucketsFunc func(ctx context.Context, params *s3.ListBucketsInput, optFns ...func(*s3.Options)) (*s3.ListBucketsOutput, error)

	// PutBucketVersioningFunc mocks the PutBucketVersioning method.
	PutBucketVersioningFunc func(ctx context.Context, params *s3.PutBucketVersioningInput, optFns ...func(*s3.Options)) (*s3.PutBucketVersioningOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetBucketVersioning holds details about calls to the GetBucketVersioning method.
		GetBucketVersioning []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.GetBucketVersioningInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// ListBuckets holds details about calls to the ListBuckets method.
		ListBuckets []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.ListBucketsInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// PutBucketVersioning holds details about calls to the PutBucketVersioning method.
		PutBucketVersioning []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.PutBucketVersioningInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
	}
	lockGetBucketVersioning sync.RWMutex
	lockListBuckets         sync.RWMutex
	lockPutBucketVersioning sync.RWMutex
}

// GetBucketVersioning calls GetBucketVersioningFunc.
func (mock *S3ActionsApiMock) GetBucketVersioning(ctx context.Context, params *s3.GetBucketVersioningInput, optFns ...func(*s3.Options)) (*s3.GetBucketVersioningOutput, error) {
	if mock.GetBucketVersioningFunc == nil {
		panic("S3ActionsApiMock.GetBucketVersioningFunc: method is nil but S3ActionsApi.GetBucketVersioning was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.GetBucketVersioningInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetBucketVersioning.Lock()
	mock.calls.GetBucketVersioning = append(mock.calls.GetBucketVersioning, callInfo)
	mock.lockGetBucketVersioning.Unlock()
	return mock.GetBucketVersioningFunc(ctx, params, optFns...)
}

// GetBucketVersioningCalls gets all the calls that were made to GetBucketVersioning.
// Check the length with:
//
//	len(mockedS3ActionsApi.GetBucketVersioningCalls())
func (mock *S3ActionsApiMock) GetBucketVersioningCalls() []struct {
	Ctx    context.Context
	Params *s3.GetBucketVersioningInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.GetBucketVersioningInput
		OptFns []func(*s3.Options)
	}
	mock.lockGetBucketVersioning.RLock()
	calls = mock.calls.GetBucketVersioning
	mock.lockGetBucketVersioning.RUnlock()
	return calls
}

// ListBuckets calls ListBucketsFunc.
func (mock *S3ActionsApiMock) ListBuckets(ctx context.Context, params *s3.ListBucketsInput, optFns ...func(*s3.Options)) (*s3.ListBucketsOutput, error) {
	if mock.ListBucketsFunc == nil {
		panic("S3ActionsApiMock.ListBucketsFunc: method is nil but S3ActionsApi.ListBuckets was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.ListBucketsInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockListBuckets.Lock()
	mock.calls.ListBuckets = append(mock.calls.ListBuckets, callInfo)
	mock.lockListBuckets.Unlock()
	return mock.ListBucketsFunc(ctx, params, optFns...)
}

// ListBucketsCalls gets all the calls that were made to ListBuckets.
// Check the length with:
//
//	len(mockedS3ActionsApi.ListBucketsCalls())
func (mock *S3ActionsApiMock) ListBucketsCalls() []struct {
	Ctx    context.Context
	Params *s3.ListBucketsInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.ListBucketsInput
		OptFns []func(*s3.Options)
	}
	mock.lockListBuckets.RLock()
	calls = mock.calls.ListBuckets
	mock.lockListBuckets.RUnlock()
	return calls
}

// PutBucketVersioning calls PutBucketVersioningFunc.
func (mock *S3ActionsApiMock) PutBucketVersioning(ctx context.Context, params *s3.PutBucketVersioningInput, optFns ...func(*s3.Options)) (*s3.PutBucketVersioningOutput, error) {
	if mock.PutBucketVersioningFunc == nil {
		panic("S3ActionsApiMock.PutBucketVersioningFunc: method is nil but S3ActionsApi.PutBucketVersioning was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.PutBucketVersioningInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockPutBucketVersioning.Lock()
	mock.calls.PutBucketVersioning = append(mock.calls.PutBucketVersioning, callInfo)
	mock.lockPutBucketVersioning.Unlock()
	return mock.PutBucketVersioningFunc(ctx, params, optFns...)
}

// PutBucketVersioningCalls gets all the calls that were made to PutBucketVersioning.
// Check the length with:
//
//	len(mockedS3ActionsApi.PutBucketVersioningCalls())
func (mock *S3ActionsApiMock) PutBucketVersioningCalls() []struct {
	Ctx    context.Context
	Params *s3.PutBucketVersioningInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.PutBucketVersioningInput
		OptFns []func(*s3.Options)
	}
	mock.lockPutBucketVersioning.RLock()
	calls = mock.calls.PutBucketVersioning
	mock.lockPutBucketVersioning.RUnlock()
	return calls
}
