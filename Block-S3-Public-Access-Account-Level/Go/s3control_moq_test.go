// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package main

import (
	"context"
	"github.com/aws/aws-sdk-go-v2/service/s3control"
	"sync"
)

// Ensure, that S3ControlActionsAPIMock does implement S3ControlActionsAPI.
// If this is not the case, regenerate this file with moq.
var _ S3ControlActionsAPI = &S3ControlActionsAPIMock{}

// S3ControlActionsAPIMock is a mock implementation of S3ControlActionsAPI.
//
//	func TestSomethingThatUsesS3ControlActionsAPI(t *testing.T) {
//
//		// make and configure a mocked S3ControlActionsAPI
//		mockedS3ControlActionsAPI := &S3ControlActionsAPIMock{
//			GetPublicAccessBlockFunc: func(ctx context.Context, params *s3control.GetPublicAccessBlockInput, optFns ...func(*s3control.Options)) (*s3control.GetPublicAccessBlockOutput, error) {
//				panic("mock out the GetPublicAccessBlock method")
//			},
//			PutPublicAccessBlockFunc: func(ctx context.Context, params *s3control.PutPublicAccessBlockInput, optFns ...func(*s3control.Options)) (*s3control.PutPublicAccessBlockOutput, error) {
//				panic("mock out the PutPublicAccessBlock method")
//			},
//		}
//
//		// use mockedS3ControlActionsAPI in code that requires S3ControlActionsAPI
//		// and then make assertions.
//
//	}
type S3ControlActionsAPIMock struct {
	// GetPublicAccessBlockFunc mocks the GetPublicAccessBlock method.
	GetPublicAccessBlockFunc func(ctx context.Context, params *s3control.GetPublicAccessBlockInput, optFns ...func(*s3control.Options)) (*s3control.GetPublicAccessBlockOutput, error)

	// PutPublicAccessBlockFunc mocks the PutPublicAccessBlock method.
	PutPublicAccessBlockFunc func(ctx context.Context, params *s3control.PutPublicAccessBlockInput, optFns ...func(*s3control.Options)) (*s3control.PutPublicAccessBlockOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetPublicAccessBlock holds details about calls to the GetPublicAccessBlock method.
		GetPublicAccessBlock []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3control.GetPublicAccessBlockInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3control.Options)
		}
		// PutPublicAccessBlock holds details about calls to the PutPublicAccessBlock method.
		PutPublicAccessBlock []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3control.PutPublicAccessBlockInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3control.Options)
		}
	}
	lockGetPublicAccessBlock sync.RWMutex
	lockPutPublicAccessBlock sync.RWMutex
}

// GetPublicAccessBlock calls GetPublicAccessBlockFunc.
func (mock *S3ControlActionsAPIMock) GetPublicAccessBlock(ctx context.Context, params *s3control.GetPublicAccessBlockInput, optFns ...func(*s3control.Options)) (*s3control.GetPublicAccessBlockOutput, error) {
	if mock.GetPublicAccessBlockFunc == nil {
		panic("S3ControlActionsAPIMock.GetPublicAccessBlockFunc: method is nil but S3ControlActionsAPI.GetPublicAccessBlock was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3control.GetPublicAccessBlockInput
		OptFns []func(*s3control.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetPublicAccessBlock.Lock()
	mock.calls.GetPublicAccessBlock = append(mock.calls.GetPublicAccessBlock, callInfo)
	mock.lockGetPublicAccessBlock.Unlock()
	return mock.GetPublicAccessBlockFunc(ctx, params, optFns...)
}

// GetPublicAccessBlockCalls gets all the calls that were made to GetPublicAccessBlock.
// Check the length with:
//
//	len(mockedS3ControlActionsAPI.GetPublicAccessBlockCalls())
func (mock *S3ControlActionsAPIMock) GetPublicAccessBlockCalls() []struct {
	Ctx    context.Context
	Params *s3control.GetPublicAccessBlockInput
	OptFns []func(*s3control.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3control.GetPublicAccessBlockInput
		OptFns []func(*s3control.Options)
	}
	mock.lockGetPublicAccessBlock.RLock()
	calls = mock.calls.GetPublicAccessBlock
	mock.lockGetPublicAccessBlock.RUnlock()
	return calls
}

// PutPublicAccessBlock calls PutPublicAccessBlockFunc.
func (mock *S3ControlActionsAPIMock) PutPublicAccessBlock(ctx context.Context, params *s3control.PutPublicAccessBlockInput, optFns ...func(*s3control.Options)) (*s3control.PutPublicAccessBlockOutput, error) {
	if mock.PutPublicAccessBlockFunc == nil {
		panic("S3ControlActionsAPIMock.PutPublicAccessBlockFunc: method is nil but S3ControlActionsAPI.PutPublicAccessBlock was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3control.PutPublicAccessBlockInput
		OptFns []func(*s3control.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockPutPublicAccessBlock.Lock()
	mock.calls.PutPublicAccessBlock = append(mock.calls.PutPublicAccessBlock, callInfo)
	mock.lockPutPublicAccessBlock.Unlock()
	return mock.PutPublicAccessBlockFunc(ctx, params, optFns...)
}

// PutPublicAccessBlockCalls gets all the calls that were made to PutPublicAccessBlock.
// Check the length with:
//
//	len(mockedS3ControlActionsAPI.PutPublicAccessBlockCalls())
func (mock *S3ControlActionsAPIMock) PutPublicAccessBlockCalls() []struct {
	Ctx    context.Context
	Params *s3control.PutPublicAccessBlockInput
	OptFns []func(*s3control.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3control.PutPublicAccessBlockInput
		OptFns []func(*s3control.Options)
	}
	mock.lockPutPublicAccessBlock.RLock()
	calls = mock.calls.PutPublicAccessBlock
	mock.lockPutPublicAccessBlock.RUnlock()
	return calls
}
