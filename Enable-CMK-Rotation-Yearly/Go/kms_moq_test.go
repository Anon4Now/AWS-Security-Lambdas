// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package main

import (
	"context"
	"github.com/aws/aws-sdk-go-v2/service/kms"
	"sync"
)

// Ensure, that KMSActionsAPIMock does implement KMSActionsAPI.
// If this is not the case, regenerate this file with moq.
var _ KMSActionsAPI = &KMSActionsAPIMock{}

// KMSActionsAPIMock is a mock implementation of KMSActionsAPI.
//
//	func TestSomethingThatUsesKMSActionsAPI(t *testing.T) {
//
//		// make and configure a mocked KMSActionsAPI
//		mockedKMSActionsAPI := &KMSActionsAPIMock{
//			DescribeKeyFunc: func(ctx context.Context, params *kms.DescribeKeyInput, optFns ...func(*kms.Options)) (*kms.DescribeKeyOutput, error) {
//				panic("mock out the DescribeKey method")
//			},
//			EnableKeyRotationFunc: func(ctx context.Context, params *kms.EnableKeyRotationInput, optFns ...func(*kms.Options)) (*kms.EnableKeyRotationOutput, error) {
//				panic("mock out the EnableKeyRotation method")
//			},
//			GetKeyRotationStatusFunc: func(ctx context.Context, params *kms.GetKeyRotationStatusInput, optFns ...func(*kms.Options)) (*kms.GetKeyRotationStatusOutput, error) {
//				panic("mock out the GetKeyRotationStatus method")
//			},
//			ListKeysFunc: func(ctx context.Context, params *kms.ListKeysInput, optFns ...func(*kms.Options)) (*kms.ListKeysOutput, error) {
//				panic("mock out the ListKeys method")
//			},
//		}
//
//		// use mockedKMSActionsAPI in code that requires KMSActionsAPI
//		// and then make assertions.
//
//	}
type KMSActionsAPIMock struct {
	// DescribeKeyFunc mocks the DescribeKey method.
	DescribeKeyFunc func(ctx context.Context, params *kms.DescribeKeyInput, optFns ...func(*kms.Options)) (*kms.DescribeKeyOutput, error)

	// EnableKeyRotationFunc mocks the EnableKeyRotation method.
	EnableKeyRotationFunc func(ctx context.Context, params *kms.EnableKeyRotationInput, optFns ...func(*kms.Options)) (*kms.EnableKeyRotationOutput, error)

	// GetKeyRotationStatusFunc mocks the GetKeyRotationStatus method.
	GetKeyRotationStatusFunc func(ctx context.Context, params *kms.GetKeyRotationStatusInput, optFns ...func(*kms.Options)) (*kms.GetKeyRotationStatusOutput, error)

	// ListKeysFunc mocks the ListKeys method.
	ListKeysFunc func(ctx context.Context, params *kms.ListKeysInput, optFns ...func(*kms.Options)) (*kms.ListKeysOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// DescribeKey holds details about calls to the DescribeKey method.
		DescribeKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *kms.DescribeKeyInput
			// OptFns is the optFns argument value.
			OptFns []func(*kms.Options)
		}
		// EnableKeyRotation holds details about calls to the EnableKeyRotation method.
		EnableKeyRotation []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *kms.EnableKeyRotationInput
			// OptFns is the optFns argument value.
			OptFns []func(*kms.Options)
		}
		// GetKeyRotationStatus holds details about calls to the GetKeyRotationStatus method.
		GetKeyRotationStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *kms.GetKeyRotationStatusInput
			// OptFns is the optFns argument value.
			OptFns []func(*kms.Options)
		}
		// ListKeys holds details about calls to the ListKeys method.
		ListKeys []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *kms.ListKeysInput
			// OptFns is the optFns argument value.
			OptFns []func(*kms.Options)
		}
	}
	lockDescribeKey          sync.RWMutex
	lockEnableKeyRotation    sync.RWMutex
	lockGetKeyRotationStatus sync.RWMutex
	lockListKeys             sync.RWMutex
}

// DescribeKey calls DescribeKeyFunc.
func (mock *KMSActionsAPIMock) DescribeKey(ctx context.Context, params *kms.DescribeKeyInput, optFns ...func(*kms.Options)) (*kms.DescribeKeyOutput, error) {
	if mock.DescribeKeyFunc == nil {
		panic("KMSActionsAPIMock.DescribeKeyFunc: method is nil but KMSActionsAPI.DescribeKey was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *kms.DescribeKeyInput
		OptFns []func(*kms.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeKey.Lock()
	mock.calls.DescribeKey = append(mock.calls.DescribeKey, callInfo)
	mock.lockDescribeKey.Unlock()
	return mock.DescribeKeyFunc(ctx, params, optFns...)
}

// DescribeKeyCalls gets all the calls that were made to DescribeKey.
// Check the length with:
//
//	len(mockedKMSActionsAPI.DescribeKeyCalls())
func (mock *KMSActionsAPIMock) DescribeKeyCalls() []struct {
	Ctx    context.Context
	Params *kms.DescribeKeyInput
	OptFns []func(*kms.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *kms.DescribeKeyInput
		OptFns []func(*kms.Options)
	}
	mock.lockDescribeKey.RLock()
	calls = mock.calls.DescribeKey
	mock.lockDescribeKey.RUnlock()
	return calls
}

// EnableKeyRotation calls EnableKeyRotationFunc.
func (mock *KMSActionsAPIMock) EnableKeyRotation(ctx context.Context, params *kms.EnableKeyRotationInput, optFns ...func(*kms.Options)) (*kms.EnableKeyRotationOutput, error) {
	if mock.EnableKeyRotationFunc == nil {
		panic("KMSActionsAPIMock.EnableKeyRotationFunc: method is nil but KMSActionsAPI.EnableKeyRotation was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *kms.EnableKeyRotationInput
		OptFns []func(*kms.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockEnableKeyRotation.Lock()
	mock.calls.EnableKeyRotation = append(mock.calls.EnableKeyRotation, callInfo)
	mock.lockEnableKeyRotation.Unlock()
	return mock.EnableKeyRotationFunc(ctx, params, optFns...)
}

// EnableKeyRotationCalls gets all the calls that were made to EnableKeyRotation.
// Check the length with:
//
//	len(mockedKMSActionsAPI.EnableKeyRotationCalls())
func (mock *KMSActionsAPIMock) EnableKeyRotationCalls() []struct {
	Ctx    context.Context
	Params *kms.EnableKeyRotationInput
	OptFns []func(*kms.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *kms.EnableKeyRotationInput
		OptFns []func(*kms.Options)
	}
	mock.lockEnableKeyRotation.RLock()
	calls = mock.calls.EnableKeyRotation
	mock.lockEnableKeyRotation.RUnlock()
	return calls
}

// GetKeyRotationStatus calls GetKeyRotationStatusFunc.
func (mock *KMSActionsAPIMock) GetKeyRotationStatus(ctx context.Context, params *kms.GetKeyRotationStatusInput, optFns ...func(*kms.Options)) (*kms.GetKeyRotationStatusOutput, error) {
	if mock.GetKeyRotationStatusFunc == nil {
		panic("KMSActionsAPIMock.GetKeyRotationStatusFunc: method is nil but KMSActionsAPI.GetKeyRotationStatus was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *kms.GetKeyRotationStatusInput
		OptFns []func(*kms.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetKeyRotationStatus.Lock()
	mock.calls.GetKeyRotationStatus = append(mock.calls.GetKeyRotationStatus, callInfo)
	mock.lockGetKeyRotationStatus.Unlock()
	return mock.GetKeyRotationStatusFunc(ctx, params, optFns...)
}

// GetKeyRotationStatusCalls gets all the calls that were made to GetKeyRotationStatus.
// Check the length with:
//
//	len(mockedKMSActionsAPI.GetKeyRotationStatusCalls())
func (mock *KMSActionsAPIMock) GetKeyRotationStatusCalls() []struct {
	Ctx    context.Context
	Params *kms.GetKeyRotationStatusInput
	OptFns []func(*kms.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *kms.GetKeyRotationStatusInput
		OptFns []func(*kms.Options)
	}
	mock.lockGetKeyRotationStatus.RLock()
	calls = mock.calls.GetKeyRotationStatus
	mock.lockGetKeyRotationStatus.RUnlock()
	return calls
}

// ListKeys calls ListKeysFunc.
func (mock *KMSActionsAPIMock) ListKeys(ctx context.Context, params *kms.ListKeysInput, optFns ...func(*kms.Options)) (*kms.ListKeysOutput, error) {
	if mock.ListKeysFunc == nil {
		panic("KMSActionsAPIMock.ListKeysFunc: method is nil but KMSActionsAPI.ListKeys was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *kms.ListKeysInput
		OptFns []func(*kms.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockListKeys.Lock()
	mock.calls.ListKeys = append(mock.calls.ListKeys, callInfo)
	mock.lockListKeys.Unlock()
	return mock.ListKeysFunc(ctx, params, optFns...)
}

// ListKeysCalls gets all the calls that were made to ListKeys.
// Check the length with:
//
//	len(mockedKMSActionsAPI.ListKeysCalls())
func (mock *KMSActionsAPIMock) ListKeysCalls() []struct {
	Ctx    context.Context
	Params *kms.ListKeysInput
	OptFns []func(*kms.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *kms.ListKeysInput
		OptFns []func(*kms.Options)
	}
	mock.lockListKeys.RLock()
	calls = mock.calls.ListKeys
	mock.lockListKeys.RUnlock()
	return calls
}
